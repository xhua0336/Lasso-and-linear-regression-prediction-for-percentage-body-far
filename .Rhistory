summary(lm8)
sjPlot::tab_model(lm8, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF~Wrist, data = data)
abline(lm8, lwd = 3, col = "red")
fitted8 = -37.0207 + 3.0763 * data$Wrist
resid8 = data$Pct.BF - fitted8
#percentage body fat vs density
p1 = ggplot(data,
aes(x = Height , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "height",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p2 = ggplot(data,
aes(x = Age , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Age",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p3 = ggplot(data,
aes(x = Abdomen , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Abdomen",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p4 = ggplot(data,
aes(x = Neck , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Neck",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p5 = ggplot(data,
aes(x = Hip , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Hip",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p6 = ggplot(data,
aes(x = Thigh, y =  Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Thigh",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p7 = ggplot(data,
aes(x = Forearm, y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Forearm",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p8 = ggplot(data,
aes(x = Wrist , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Wrist",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, nrow =3, ncol = 3)
p9 = ggplot(data,
aes(x = Height, y = resid1)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Height", y = "Residual") +
geom_hline(yintercept = 0)
p10 = ggplot(data,
aes(x = Age, y = resid2)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Age", y = "Residual") +
geom_hline(yintercept = 0)
p11 = ggplot(data,
aes(x = Abdomen, y = resid3)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Abdomen", y = "Residual") +
geom_hline(yintercept = 0)
p12 = ggplot(data,
aes(x =Neck, y = resid4)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Neck", y = "Residual") +
geom_hline(yintercept = 0)
p13 = ggplot(data,
aes(x = Hip, y = resid5)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Hip", y = "Residual") +
geom_hline(yintercept = 0)
p14 = ggplot(data,
aes(x = Thigh, y = resid6)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Thigh", y = "Residual") +
geom_hline(yintercept = 0)
p15 = ggplot(data,
aes(x = Forearm, y = resid7)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Forearm", y = "Residual") +
geom_hline(yintercept = 0)
p16 = ggplot(data,
aes(x = Wrist, y = resid8)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Wrist", y = "Residual") +
geom_hline(yintercept = 0)
grid.arrange(p9, p10, p11,p12,p13,p14,p15,p16 ,nrow =3, ncol = 3)
autoplot(lm1, which = 1:2)
autoplot(lm2, which = 1:2)
autoplot(lm3, which = 1:2)
autoplot(lm4, which = 1:2)
autoplot(lm5, which = 1:2)
autoplot(lm6, which = 1:2)
autoplot(lm7, which = 1:2)
autoplot(lm8, which = 1:2)
#mutate log (hip)
data = data %>% mutate(
log_hip = log(Hip)
)
lm10 = lm(Pct.BF ~ log_hip, data = data)
summary(lm10)
sjPlot::tab_model(lm10, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF~log_hip, data = data)
abline(lm10, lwd = 3, col = "red")
fitted10 = -359.346 + 82.263 * data$log_hip
resid10 = data$Pct.BF - fitted10
#mutate log (hip)
data = data %>% mutate(
log_hip = log(Hip)
)
#check linearity
f1 = ggplot(data,
aes(x = log_hip , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "log_hip",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
#Check equal variance
f2 =ggplot(data,
aes(x = log_hip, y = resid10)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "log_Hip", y = "Residual") +
geom_hline(yintercept = 0)
grid.arrange(f1,f2,nrow =1, ncol = 2)
#check normality
autoplot(lm10, which = 1:2)
##Check multicolinearity
#extract the data which is strongly correlated to percentage body fat
corr = data %>%
select(Pct.BF, Height, Abdomen, Wrist, log_hip) #select corr > 0.7 or < -0.7
#correlation matrix
GGally::ggpairs(corr) + theme_bw(base_size = 15)
lm_simple = lm(Pct.BF ~ Height + Abdomen + Wrist, data = data) #
round(summary(lm_simple)$coef, 3)
sjPlot::tab_model(lm_simple, show.ci = FALSE)
lm_simple_hip = lm(Pct.BF ~ Height + Abdomen + Wrist + log_hip, data = data)
round(summary(lm_simple_hip)$coef, 3)
sjPlot::tab_model(lm_simple_hip, show.ci = FALSE)
set.seed(2020)
nrow(data)
fold_id = c(rep(1:10, each = 25))
data$fold_id = sample(fold_id, replace = FALSE)
head(data)
k = 10
lasso_mse = simple_hip_mse = simple_mse = vector(mode = "numeric", length = k)
lasso_mae = simple_hip_mae = simple_mae = vector(mode = "numeric", length = k)
for(i in 1:k) {
test_set = data[fold_id == i,]
training_set = data[fold_id != i,]
simple_lm = lm(Pct.BF ~ Height + Abdomen + Wrist, data = training_set)
simple_pred = predict(simple_lm, test_set)
simple_mse[i] = mean((test_set$Pct.BF - simple_pred)^2)
simple_mae[i] = mean(abs(test_set$Pct.BF - simple_pred))
simple_hip = lm(Pct.BF ~ Height + Abdomen + Wrist + log_hip, data = training_set)
simple_hip_pred = predict(simple_hip, test_set)
simple_hip_mse[i] = mean((test_set$Pct.BF - simple_hip_pred)^2)
simple_hip_mae[i] = mean(abs(test_set$Pct.BF - simple_hip_pred))
#lasso
x_train = model.matrix(Pct.BF~. , training_set)[,2:15]
y_train = training_set$Pct.BF
x_test = model.matrix(Pct.BF~. , test_set)[,2:15]
y_test = test_set$Pct.BF
lambda_seq = 10^seq(2, -2, by = -.1)
cv_output = cv.glmnet(x_train, y_train,
alpha = 1, lambda = lambda_seq,
nfolds = 5)
# identifying best lamda
best_lam = cv_output$lambda.min
best_lam
lasso_best = glmnet(x_train, y_train, alpha = 1, lambda = best_lam)
lasso_pred = predict(lasso_best, s = best_lam, newx = x_test)
lasso_mse[i] = mean((test_set$Pct.BF - lasso_pred)^2)
lasso_mae[i] = mean(abs(test_set$Pct.BF - lasso_pred))}
cv_res = tibble(simple_mse,  simple_mae, simple_hip_mse, simple_hip_mae, lasso_mse,lasso_mae)
cv_res
result = matrix(c(sqrt(mean(simple_mse)),sqrt(mean(simple_hip_mse)), sqrt(mean(lasso_mse)), mean(simple_mae), mean(simple_hip_mae),mean(lasso_mae)), ncol=2)
colnames(result)= c('RMSE', 'MAE')
rownames(result) = c('simple model', 'simple model with log hip', 'lasso')
knitr::kable(result,digits=4)
lm_simple = lm(Pct.BF ~ Height + Abdomen + Wrist, data = data) #
round(summary(lm_simple)$coef, 3)
sjPlot::tab_model(lm_simple, show.ci = FALSE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
devtools::install_github("ropenscilabs/gendercodeR")
#import libraries
library(tidyverse)
library(janitor)
library(skimr)
library(gridExtra)
library(GGally)
library(qtlcharts)
library(ggfortify)
library(sjPlot)
library(glmnet)
options(knitr.table.format = "html")
data = read.table("bodyfat.txt",header=TRUE) #read the data
glimpse(data)# Quick glimpse of the data
skimr::skim(data)
# boxplot
a = data %>%
ggplot()+
aes(x = Height, y = Pct.BF)+
geom_boxplot()+
geom_jitter(width = 0.15, size = 1, colours = "steelblue")+
theme_bw(base_size = 14)+
labs(x = "Height", y = "Percentage body fat")
#qqplot
b = data %>%
ggplot()+
aes(sample = Height)+
geom_qq()+
geom_qq_line()+
labs(title = "Normal Q-Q Plot of Height" )+
theme_bw(base_size = 14)+
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(a, b,nrow =1, ncol = 2)
t.test(data$Height, mu = 69.1, alternative = "two.sided")
#Delete the density feature as the percentage body fat is calculated based on density. There is a strong correlation between each other
data = subset(data, select = -1)
M0 = lm(Pct.BF ~ 1, data = data) # Null model
M1 = lm(Pct.BF ~ ., data = data) # FUll model
step.fwd.aic = step(M0, scope = list(lower = M0, upper = M1), direction = "forward", trace = FALSE)
round(summary(step.fwd.aic)$coef,3)
step.back.aic = step(M1, direction = "backward", trace = FALSE)
round(summary(step.back.aic)$coef,3)
sjPlot::tab_model( step.fwd.aic, step.back.aic, show.ci = FALSE, show.aic = TRUE, dv.labels = c("Forward model", "Backward model") )
lm1 = lm(Pct.BF ~ Height , data = data)
summary(lm1)
sjPlot::tab_model(lm1, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF ~ Height, data = data)
abline(lm1, lwd = 3, col = "red")
fitted1 = 25.58078 + (-0.09316) * data$Height
resid1 = data$Pct.BF - fitted1
lm2 = lm(Pct.BF ~ Age, data = data)
summary(lm2)
sjPlot::tab_model(lm2, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF~Age, data = data)
abline(lm2, lwd = 3, col = "red")
fitted2 = 10.35029  +  0.19342 * data$Age
resid2 = data$Pct.BF - fitted2
lm3 = lm(Pct.BF ~ Abdomen, data = data)
summary(lm3)
sjPlot::tab_model(lm3, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF~Abdomen, data = data)
abline(lm3, lwd = 3, col = "red")
fitted3 = -42.73413  + 0.66928 * data$Abdomen
resid3 = data$Pct.BF - fitted3
lm4 = lm(Pct.BF ~ Neck, data = data)
summary(lm4)
sjPlot::tab_model(lm4, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF~Neck, data = data)
abline(lm4, lwd = 3, col = "red")
fitted4 = -48.0929  +  1.7690  * data$Neck
resid4 = data$Pct.BF - fitted4
lm5 = lm(Pct.BF ~ Hip, data = data)
summary(lm5)
sjPlot::tab_model(lm5, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF~Hip, data = data)
abline(lm5, lwd = 3, col = "red")
fitted5 = -62.1198 +  0.8144  * data$Hip
resid5 = data$Pct.BF - fitted5
lm6 = lm(Pct.BF ~ Thigh, data = data)
summary(lm6)
sjPlot::tab_model(lm6, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF~Thigh, data = data)
abline(lm6, lwd = 3, col = "red")
fitted6 = -35.84405 + 0.92618 * data$Thigh
resid6 = data$Pct.BF - fitted6
lm7 = lm(Pct.BF ~ Forearm, data = data)
summary(lm7)
sjPlot::tab_model(lm7, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF~Forearm, data = data)
abline(lm7, lwd = 3, col = "red")
fitted7 = -23.7060 + 1.4911 * data$Forearm
resid7 = data$Pct.BF - fitted7
lm8 = lm(Pct.BF ~ Wrist, data = data)
summary(lm8)
sjPlot::tab_model(lm8, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF~Wrist, data = data)
abline(lm8, lwd = 3, col = "red")
fitted8 = -37.0207 + 3.0763 * data$Wrist
resid8 = data$Pct.BF - fitted8
#percentage body fat vs density
p1 = ggplot(data,
aes(x = Height , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "height",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p2 = ggplot(data,
aes(x = Age , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Age",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p3 = ggplot(data,
aes(x = Abdomen , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Abdomen",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p4 = ggplot(data,
aes(x = Neck , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Neck",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p5 = ggplot(data,
aes(x = Hip , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Hip",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p6 = ggplot(data,
aes(x = Thigh, y =  Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Thigh",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p7 = ggplot(data,
aes(x = Forearm, y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Forearm",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
p8 = ggplot(data,
aes(x = Wrist , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "Wrist",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, nrow =3, ncol = 3)
p9 = ggplot(data,
aes(x = Height, y = resid1)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Height", y = "Residual") +
geom_hline(yintercept = 0)
p10 = ggplot(data,
aes(x = Age, y = resid2)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Age", y = "Residual") +
geom_hline(yintercept = 0)
p11 = ggplot(data,
aes(x = Abdomen, y = resid3)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Abdomen", y = "Residual") +
geom_hline(yintercept = 0)
p12 = ggplot(data,
aes(x =Neck, y = resid4)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Neck", y = "Residual") +
geom_hline(yintercept = 0)
p13 = ggplot(data,
aes(x = Hip, y = resid5)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Hip", y = "Residual") +
geom_hline(yintercept = 0)
p14 = ggplot(data,
aes(x = Thigh, y = resid6)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Thigh", y = "Residual") +
geom_hline(yintercept = 0)
p15 = ggplot(data,
aes(x = Forearm, y = resid7)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Forearm", y = "Residual") +
geom_hline(yintercept = 0)
p16 = ggplot(data,
aes(x = Wrist, y = resid8)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "Wrist", y = "Residual") +
geom_hline(yintercept = 0)
grid.arrange(p9, p10, p11,p12,p13,p14,p15,p16 ,nrow =3, ncol = 3)
autoplot(lm1, which = 1:2)
autoplot(lm2, which = 1:2)
autoplot(lm3, which = 1:2)
autoplot(lm4, which = 1:2)
autoplot(lm5, which = 1:2)
autoplot(lm6, which = 1:2)
autoplot(lm7, which = 1:2)
autoplot(lm8, which = 1:2)
#mutate log (hip)
data = data %>% mutate(
log_hip = log(Hip)
)
lm10 = lm(Pct.BF ~ log_hip, data = data)
summary(lm10)
sjPlot::tab_model(lm10, show.ci = FALSE)
par(cex = 2)
plot(Pct.BF~log_hip, data = data)
abline(lm10, lwd = 3, col = "red")
fitted10 = -359.346 + 82.263 * data$log_hip
resid10 = data$Pct.BF - fitted10
#mutate log (hip)
data = data %>% mutate(
log_hip = log(Hip)
)
#check linearity
f1 = ggplot(data,
aes(x = log_hip , y = Pct.BF)) +
geom_point(size = 1) +
theme_classic(base_size = 12) +
labs(x = "log_hip",
y = "Percentage body fat") +
geom_smooth(method = "lm", se = FALSE)
#Check equal variance
f2 =ggplot(data,
aes(x = log_hip, y = resid10)) +
geom_point(size = 1) + theme_classic(base_size = 12) +
labs(x = "log_Hip", y = "Residual") +
geom_hline(yintercept = 0)
grid.arrange(f1,f2,nrow =1, ncol = 2)
#check normality
autoplot(lm10, which = 1:2)
##Check multicolinearity
#extract the data which is strongly correlated to percentage body fat
corr = data %>%
select(Pct.BF, Height, Abdomen, Wrist, log_hip) #select corr > 0.7 or < -0.7
#correlation matrix
GGally::ggpairs(corr) + theme_bw(base_size = 15)
lm_simple = lm(Pct.BF ~ Height + Abdomen + Wrist, data = data) #
round(summary(lm_simple)$coef, 3)
sjPlot::tab_model(lm_simple, show.ci = FALSE)
lm_simple_hip = lm(Pct.BF ~ Height + Abdomen + Wrist + log_hip, data = data)
round(summary(lm_simple_hip)$coef, 3)
sjPlot::tab_model(lm_simple_hip, show.ci = FALSE)
set.seed(2020)
nrow(data)
fold_id = c(rep(1:10, each = 25))
data$fold_id = sample(fold_id, replace = FALSE)
head(data)
k = 10
lasso_mse = simple_hip_mse = simple_mse = vector(mode = "numeric", length = k)
lasso_mae = simple_hip_mae = simple_mae = vector(mode = "numeric", length = k)
for(i in 1:k) {
test_set = data[fold_id == i,]
training_set = data[fold_id != i,]
simple_lm = lm(Pct.BF ~ Height + Abdomen + Wrist, data = training_set)
simple_pred = predict(simple_lm, test_set)
simple_mse[i] = mean((test_set$Pct.BF - simple_pred)^2)
simple_mae[i] = mean(abs(test_set$Pct.BF - simple_pred))
simple_hip = lm(Pct.BF ~ Height + Abdomen + Wrist + log_hip, data = training_set)
simple_hip_pred = predict(simple_hip, test_set)
simple_hip_mse[i] = mean((test_set$Pct.BF - simple_hip_pred)^2)
simple_hip_mae[i] = mean(abs(test_set$Pct.BF - simple_hip_pred))
#lasso
x_train = model.matrix(Pct.BF~. , training_set)[,2:15]
y_train = training_set$Pct.BF
x_test = model.matrix(Pct.BF~. , test_set)[,2:15]
y_test = test_set$Pct.BF
lambda_seq = 10^seq(2, -2, by = -.1)
cv_output = cv.glmnet(x_train, y_train,
alpha = 1, lambda = lambda_seq,
nfolds = 5)
# identifying best lamda
best_lam = cv_output$lambda.min
best_lam
lasso_best = glmnet(x_train, y_train, alpha = 1, lambda = best_lam)
lasso_pred = predict(lasso_best, s = best_lam, newx = x_test)
lasso_mse[i] = mean((test_set$Pct.BF - lasso_pred)^2)
lasso_mae[i] = mean(abs(test_set$Pct.BF - lasso_pred))}
cv_res = tibble(simple_mse,  simple_mae, simple_hip_mse, simple_hip_mae, lasso_mse,lasso_mae)
cv_res
result = matrix(c(sqrt(mean(simple_mse)),sqrt(mean(simple_hip_mse)), sqrt(mean(lasso_mse)), mean(simple_mae), mean(simple_hip_mae),mean(lasso_mae)), ncol=2)
colnames(result)= c('RMSE', 'MAE')
rownames(result) = c('simple model', 'simple model with log hip', 'lasso')
knitr::kable(result,digits=4)
autoplot(lm1, which = 1:2)
autoplot(lm2, which = 1:2)
autoplot(lm3, which = 1:2)
autoplot(lm4, which = 1:2)
autoplot(lm5, which = 1:2)
autoplot(lm6, which = 1:2)
autoplot(lm7, which = 1:2)
autoplot(lm8, which = 1:2)
